name: Update NBA Minutes JSON (Basketball-Reference CSV)

on:
  schedule:
    - cron: "0 10 * * *" # daily at 10:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Prepare output folder
        run: |
          mkdir -p docs/minutes
          touch docs/.nojekyll

      - name: Generate NBA Minutes JSON
        run: |
          node - <<'NODE'
          import fs from 'fs';
          import https from 'https';

          // --- CONFIG ---
          const year = new Date().getMonth() >= 9 ? new Date().getFullYear() + 1 : new Date().getFullYear();
          const csvURL = `https://www.basketball-reference.com/leagues/NBA_${year}_per_game.csv`;
          const outPath = `docs/minutes/${year}.json`;

          console.log(`üèÄ Fetching minutes from ${csvURL}`);

          function fetchCSV(url) {
            return new Promise((resolve, reject) => {
              https.get(url, res => {
                if (res.statusCode !== 200) {
                  reject(new Error(`HTTP ${res.statusCode}`));
                  return;
                }
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => resolve(data));
              }).on('error', reject);
            });
          }

          function parseCSV(csv) {
            const lines = csv.trim().split('\n');
            const headers = lines[0].split(',');
            const rows = lines.slice(1).map(line => {
              const values = line.split(',');
              const obj = {};
              headers.forEach((h, i) => obj[h] = values[i]);
              return obj;
            });

            // Extract key stats
            return rows
              .filter(r => !isNaN(parseFloat(r.MP))) // skip headers/invalid rows
              .map((r, i) => ({
                id: i + 1,
                playerName: r.Player,
                teamAbbr: r.Tm,
                games: parseInt(r.G, 10) || 0,
                mpg: parseFloat(r.MP) || 0,
                rawMin: r.MP
              }))
              .sort((a, b) => b.mpg - a.mpg);
          }

          try {
            const csv = await fetchCSV(csvURL);
            const rows = parseCSV(csv);
            const env = {
              seasonEndYear: year,
              yyyymmdd: new Date().toISOString().slice(0,10).replace(/-/g,''),
              rows
            };
            fs.writeFileSync(outPath, JSON.stringify(env, null, 2));
            console.log(`‚úÖ Saved ${outPath} (${rows.length} rows)`);
          } catch (err) {
            console.error('‚ùå Failed:', err.message);
            process.exit(1);
          }
          NODE

      - name: Commit and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/minutes/*.json docs/.nojekyll
          git commit -m "Auto-update NBA minutes JSON" || echo "No changes"
          git push
