name: Update NBA Minutes JSON

on:
  schedule:
    - cron: "0 10 * * *"   # daily at 10:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: |
          npm install cheerio@1

      - name: Generate NBA Minutes JSON (from Basketball-Reference)
        run: |
          mkdir -p docs/minutes
          touch docs/.nojekyll
          node - <<'NODE'
          import fs from 'node:fs/promises';
          import fetch from 'node-fetch';
          import * as cheerio from 'cheerio';

          // Season math: NBA pages use END year, e.g. 2026 for 2025–26
          const now = new Date();
          const endYear = (now.getMonth() >= 9) ? now.getFullYear() + 1 : now.getFullYear();
          const url = `https://www.basketball-reference.com/leagues/NBA_${endYear}_per_game.html`;

          console.log('Fetching:', url);
          const res = await fetch(url, { headers: { 'User-Agent': 'minutes-bot' } });
          if (!res.ok) {
            const text = await res.text();
            console.error('HTTP error', res.status, res.statusText);
            console.error(text.slice(0, 300));
            process.exit(1);
          }
          const html = await res.text();
          const $ = cheerio.load(html);

          // Parse table
          const rows = [];
          const seen = new Set(); // avoid header duplicates

          $('#per_game_stats tbody tr').each((_, el) => {
            const $tr = $(el);
            if ($tr.hasClass('thead')) return; // skip header separators

            const player = $tr.find('td[data-stat="player"]').text().trim();
            const team   = $tr.find('td[data-stat="team_id"]').text().trim();
            const gpStr  = $tr.find('td[data-stat="g"]').text().trim();
            const mpgStr = $tr.find('td[data-stat="mp_per_g"]').text().trim();

            if (!player || !team || !mpgStr) return;

            // BBR has a "TOT" row when traded; keep "TOT" and ignore the team-specific duplicates
            const key = `${player}|${team}|${mpgStr}|${gpStr}`;
            if (seen.has(key)) return;
            seen.add(key);

            const gp  = Number(gpStr) || 0;
            const mpg = Number(mpgStr) || 0;

            rows.push({
              // Use array index as id; your app doesn’t rely on global IDs here
              id: rows.length + 1,
              playerName: player,
              teamAbbr: team,
              games: gp,
              mpg,
              rawMin: mpgStr
            });
          });

          rows.sort((a,b) => b.mpg - a.mpg);

          const envelope = {
            seasonEndYear: endYear,
            yyyymmdd: new Date().toISOString().slice(0,10).replace(/-/g,''),
            rows
          };

          const outPath = `docs/minutes/${endYear}.json`;
          await fs.writeFile(outPath, JSON.stringify(envelope, null, 2));
          console.log(`✅ Saved ${outPath} with ${rows.length} players`);
          NODE

      - name: Commit and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/minutes/*.json docs/.nojekyll
          git commit -m "Auto-update NBA minutes JSON" || echo "No changes"
          git push
