name: Update NBA Minutes JSON (balldontlie, with fallback)

on:
  schedule:
    - cron: "0 10 * * *"   # daily at 10:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate NBA Minutes JSON
        run: |
          mkdir -p docs/minutes
          touch docs/.nojekyll

          node - <<'NODE'
          import fs from 'node:fs/promises';

          async function fetchJSON(url) {
            const res = await fetch(url);
            if (!res.ok) throw new Error(`Fetch failed ${res.status}`);
            return await res.json();
          }

          const sleep = ms => new Promise(r => setTimeout(r, ms));
          const chunk = (arr, n) => arr.reduce((a,_,i)=>(i%n?a[a.length-1].push(arr[i]):a.push([arr[i]]),a),[]);

          async function fetchPlayers(year) {
            let page = 1, all = [];
            while (true) {
              const u = `https://www.balldontlie.io/api/v1/players?per_page=100&page=${page}&active=true`;
              const res = await fetch(u);
              if (res.status === 404) throw new Error(`players page ${page} -> 404`);
              const j = await res.json();
              all.push(...j.data);
              if (!j.meta?.next_page) break;
              page++;
              await sleep(200);
            }
            return all;
          }

          async function buildSeasonRows(startYear) {
            const players = await fetchPlayers(startYear);
            const ids = players.map(p => p.id);
            const nameBy = Object.fromEntries(players.map(p => [p.id, `${p.first_name} ${p.last_name}`]));
            const teamBy = Object.fromEntries(players.map(p => [p.id, p.team?.abbreviation ?? '‚Äî']));

            let avgs = [];
            for (const ch of chunk(ids, 100)) {
              const url = new URL('https://www.balldontlie.io/api/v1/season_averages');
              url.searchParams.set('season', String(startYear));
              ch.forEach(id => url.searchParams.append('player_ids[]', String(id)));
              const j = await fetchJSON(url);
              avgs.push(...(j.data ?? []));
              await sleep(200);
            }

            return avgs.map(a => {
              const [mm, ss='0'] = a.min.split(':');
              const mpg = Number(mm) + Number(ss)/60;
              return {
                id: a.player_id,
                playerName: nameBy[a.player_id] ?? String(a.player_id),
                teamAbbr: teamBy[a.player_id] ?? '‚Äî',
                games: a.games_played ?? 0,
                mpg,
                rawMin: a.min
              };
            }).sort((a,b)=>b.mpg-a.mpg);
          }

          // MAIN
          const now = new Date();
          const endYear = (now.getMonth()>=9) ? now.getFullYear()+1 : now.getFullYear();
          const startYear = endYear - 1;
          const outPath = `docs/minutes/${endYear}.json`;

          console.log(`üèÄ Target season: ${startYear}-${String(endYear).slice(2)}`);

          try {
            console.log('üì° Fetching active players list‚Ä¶');
            let rows;
            try {
              rows = await buildSeasonRows(startYear);
            } catch (e) {
              console.warn(`‚ö†Ô∏è Current season unavailable (${e.message}). Trying previous season‚Ä¶`);
              rows = await buildSeasonRows(startYear - 1);
            }

            const envelope = {
              seasonEndYear: endYear,
              yyyymmdd: new Date().toISOString().slice(0,10).replace(/-/g,''),
              rows
            };
            await fs.writeFile(outPath, JSON.stringify(envelope, null, 2));
            console.log(`‚úÖ Saved ${outPath} (${rows.length} players)`);
          } catch (err) {
            console.error('‚ùå Script failed:', err);
            process.exit(1);
          }
          NODE

      - name: Commit and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/minutes/*.json docs/.nojekyll
          git commit -m "Auto-update NBA minutes JSON" || echo "No changes"
          git push
