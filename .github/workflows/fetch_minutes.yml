name: Update NBA Minutes JSON

on:
  schedule:
    - cron: "0 10 * * *"   # daily at 10:00 UTC (5‚Äì6am ET depending on DST)
  workflow_dispatch:

permissions:
  contents: write  # allow the workflow to push to the repo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate NBA Minutes JSON (balldontlie, with fallback)
        run: |
          mkdir -p docs/minutes
          # Make sure Pages serves /docs as static files (no Jekyll processing)
          touch docs/.nojekyll

          node - <<'NODE'
          // No imports needed; Node 20+ has global fetch.
          const sleep = (ms) => new Promise(r => setTimeout(r, ms));
          const chunk = (arr, n) => {
            const out = [];
            for (let i = 0; i < arr.length; i += n) out.push(arr.slice(i, i + n));
            return out;
          };

          // Build one season and return rows in your PlayerMinutes shape
          async function buildSeasonRows(startYear) {
            console.log(`üì• Fetching active players list‚Ä¶`);
            let page = 1, per = 100, players = [];
            while (true) {
              const url = `https://www.balldontlie.io/api/v1/players?per_page=${per}&page=${page}&active=true`;
              const res = await fetch(url);
              if (!res.ok) throw new Error(`players page ${page} -> ${res.status}`);
              const j = await res.json();
              if (!Array.isArray(j.data)) throw new Error(`players page ${page} invalid payload`);
              players.push(...j.data);
              if (!j.meta?.next_page) break;
              page++;
              await sleep(150);
            }
            console.log(`üßæ Active players: ${players.length}`);

            const idToName = new Map(players.map(p => [p.id, `${p.first_name} ${p.last_name}`]));
            const idToTeam = new Map(players.map(p => [p.id, p.team?.abbreviation ?? '‚Äî']));
            const ids = players.map(p => p.id);
            const batches = chunk(ids, 100);

            console.log(`üìä Fetching season averages for ${startYear} in ${batches.length} batches‚Ä¶`);
            const avgs = [];
            for (const [i, batch] of batches.entries()) {
              const u = new URL('https://www.balldontlie.io/api/v1/season_averages');
              u.searchParams.set('season', String(startYear));
              for (const id of batch) u.searchParams.append('player_ids[]', String(id));

              const res = await fetch(u);
              if (!res.ok) {
                // 404/400 usually means season not available yet
                throw new Error(`season_averages ${startYear} batch ${i+1}/${batches.length} -> ${res.status}`);
              }
              const j = await res.json();
              const data = Array.isArray(j.data) ? j.data : [];
              avgs.push(...data);
              await sleep(200);
            }

            console.log(`‚úÖ Got ${avgs.length} season-avg records for ${startYear}`);
            // Map to your PlayerMinutes rows
            let nextID = 1;
            const rows = avgs.map(a => {
              const [mm, ss = '0'] = String(a.min ?? '0').split(':');
              const mpg = Number(mm || 0) + Number(ss || 0)/60;
              return {
                id: nextID++,
                playerName: idToName.get(a.player_id) ?? String(a.player_id),
                teamAbbr:   idToTeam.get(a.player_id) ?? '‚Äî',
                games:      Number(a.games_played ?? 0),
                mpg,
                rawMin:     String(a.min ?? '0:00')
              };
            }).filter(r => r.mpg > 0).sort((a,b) => b.mpg - a.mpg);

            return rows;
          }

          (async () => {
            const now = new Date();
            const endYear = (now.getMonth() >= 9) ? now.getFullYear() + 1 : now.getFullYear(); // Oct‚ÄìDec => next year
            const startYear = endYear - 1;
            const outPath = `docs/minutes/${endYear}.json`;

            console.log(`üîé Target season: ${startYear}-${String(endYear).slice(2)}`);

            let rows = [];
            try {
              rows = await buildSeasonRows(startYear);
              if (rows.length === 0) throw new Error('no rows for current season');
            } catch (e) {
              console.warn(`‚ö†Ô∏è Current season unavailable (${e.message}). Trying previous season‚Ä¶`);
              rows = await buildSeasonRows(startYear - 1);
            }

            const envelope = {
              seasonEndYear: endYear,
              yyyymmdd: new Date().toISOString().slice(0,10).replace(/-/g,''),
              rows
            };

            const fs = await import('node:fs/promises');
            await fs.writeFile(outPath, JSON.stringify(envelope, null, 2));
            console.log(`üíæ Saved ${outPath} with ${rows.length} rows`);
          })().catch(err => {
            console.error('‚ùå Script failed:', err);
            process.exit(1);
          });
          NODE

      - name: Commit and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/minutes/*.json docs/.nojekyll
          git commit -m "Auto-update NBA minutes JSON" || echo "No changes"
          git push
