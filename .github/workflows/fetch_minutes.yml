name: Update NBA Minutes JSON (NBA Stats ‚Üí GitHub Pages)

on:
  schedule:
    - cron: "0 10 * * *"     # daily at 10:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Prepare output folder
        run: |
          mkdir -p docs/minutes
          touch docs/.nojekyll

      - name: Generate minutes JSON from NBA Stats
        run: |
          node - <<'NODE'
          import fs from 'node:fs/promises';

          // ---------- season helpers ----------
          const now = new Date();
          const endYear = (now.getMonth() >= 9) ? now.getFullYear() + 1 : now.getFullYear();   // e.g. 2026
          const startYear = endYear - 1;                                                        // e.g. 2025
          const seasonStr = `${startYear}-${String(endYear).slice(-2)}`;                        // e.g. "2025-26"
          const OUT = `docs/minutes/${endYear}.json`;

          // ---------- HTTP helpers ----------
          const commonHeaders = {
            // NBA stats expects "real browser" headers; these work reliably in Actions
            "Accept": "application/json, text/plain, */*",
            "Accept-Language": "en-US,en;q=0.9",
            "Connection": "keep-alive",
            "Origin": "https://www.nba.com",
            "Referer": "https://www.nba.com/stats/",
            "Sec-Fetch-Dest": "empty",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Site": "same-site",
            "User-Agent":
              "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
            "x-nba-stats-origin": "stats",
            "x-nba-stats-token": "true",
            // compression is automatic in fetch; no need to request gzip explicitly
          };

          async function getJSON(url) {
            const res = await fetch(url, { headers: commonHeaders });
            if (!res.ok) throw new Error(`HTTP ${res.status} for ${url}`);
            return await res.json();
          }

          // ---------- providers ----------
          // Preferred: leagueleaders (StatCategory=MIN, PerGame)
          async function fetchFromLeagueLeaders() {
            const url = new URL("https://stats.nba.com/stats/leagueleaders");
            url.search = new URLSearchParams({
              LeagueID: "00",
              PerMode: "PerGame",
              Scope: "RS",
              Season: seasonStr,
              SeasonType: "Regular Season",
              StatCategory: "MIN",
              ActiveFlag: "Y"
            }).toString();

            const j = await getJSON(url.toString());
            const rs = j.resultSet ?? j.resultSets?.[0];
            if (!rs) return [];

            const headers = rs.headers;
            const rows = rs.rowSet || [];

            const idx = (k) => headers.indexOf(k);
            const iName = (idx("PLAYER") !== -1 ? idx("PLAYER") : idx("PLAYER_NAME"));
            const iTeam = (idx("TEAM") !== -1 ? idx("TEAM") : idx("TEAM_ABBREVIATION"));
            const iGP   = idx("GP");
            const iMIN  = idx("MIN");
            if (iName < 0 || iTeam < 0 || iGP < 0 || iMIN < 0) return [];

            let out = [];
            let id = 1;
            for (const r of rows) {
              const name = r[iName] ?? "";
              if (!name) continue;
              const team = r[iTeam] ?? "‚Äî";
              const gp   = Number(r[iGP] ?? 0) || 0;
              const mpg  = Number(r[iMIN] ?? 0) || 0;
              out.push({
                id: id++,
                playerName: String(name),
                teamAbbr: String(team),
                games: gp,
                mpg,
                rawMin: mpg.toFixed(1)
              });
            }
            out.sort((a,b)=>b.mpg - a.mpg);
            return out;
          }

          // Fallback: leaguedashplayerstats (MeasureType=Base, PerGame)
          async function fetchFromLeagueDash() {
            const url = new URL("https://stats.nba.com/stats/leaguedashplayerstats");
            url.search = new URLSearchParams({
              LeagueID: "00",
              MeasureType: "Base",
              PerMode: "PerGame",
              PlusMinus: "N",
              PaceAdjust: "N",
              Rank: "N",
              Season: seasonStr,
              SeasonType: "Regular Season"
            }).toString();

            const j = await getJSON(url.toString());
            const rs = j.resultSets?.[0] ?? j.resultSet;
            if (!rs) return [];

            const headers = rs.headers;
            const rows = rs.rowSet || [];

            const idx = (k) => headers.indexOf(k);
            const iName = (idx("PLAYER_NAME") !== -1 ? idx("PLAYER_NAME") : idx("PLAYER"));
            const iTeam = (idx("TEAM_ABBREVIATION") !== -1 ? idx("TEAM_ABBREVIATION") : idx("TEAM"));
            const iGP   = idx("GP");
            const iMIN  = idx("MIN");
            if (iName < 0 || iTeam < 0 || iGP < 0 || iMIN < 0) return [];

            let out = [];
            let id = 1;
            for (const r of rows) {
              const name = r[iName] ?? "";
              if (!name) continue;
              const team = r[iTeam] ?? "‚Äî";
              const gp   = Number(r[iGP] ?? 0) || 0;
              const mpg  = Number(r[iMIN] ?? 0) || 0;
              out.push({
                id: id++,
                playerName: String(name),
                teamAbbr: String(team),
                games: gp,
                mpg,
                rawMin: mpg.toFixed(1)
              });
            }
            out.sort((a,b)=>b.mpg - a.mpg);
            return out;
          }

          // ---------- main ----------
          console.log(`üèÄ Season: ${seasonStr}`);
          let rows = [];
          try {
            console.log("üìà Fetching from leagueleaders‚Ä¶");
            rows = await fetchFromLeagueLeaders();
          } catch (e) {
            console.warn("leagueleaders failed:", e.message);
          }
          if (!rows.length) {
            try {
              console.log("‚Ü©Ô∏è Falling back to leaguedashplayerstats‚Ä¶");
              rows = await fetchFromLeagueDash();
            } catch (e) {
              console.warn("leaguedash failed:", e.message);
            }
          }
          if (!rows.length) {
            throw new Error("Both NBA providers returned 0 rows.");
          }

          const envelope = {
            seasonEndYear: endYear,
            yyyymmdd: new Date().toISOString().slice(0,10).replace(/-/g,''),
            rows
          };
          await fs.writeFile(OUT, JSON.stringify(envelope, null, 2));
          console.log(`‚úÖ Wrote ${OUT} (${rows.length} players)`);
          NODE

      - name: Commit and push
        env: { GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/minutes/*.json docs/.nojekyll
          git commit -m "Auto-update NBA minutes JSON" || echo "No changes"
          git push
